cumsum(dy)
dy <- c(0.95,-0.6,0.3,-0.6,0.9)
cumsum(dy)
rep(1:3, each=2)
library(grid)
grid.newpage()
# grid.polygon(x=c(0.1,0.1,0.2,0.2,0.1), y = c(0.1,0.2,0.2,0.1,0.1),
#               id=rep(1,5), gp=gpar(fill="red"))
dx <- c(0.35,0.6,-0.9,0.6,-0.3)
dy <- c(0.95,-0.6,0.3,-0.6,0.9)
N <- 5
xx <- cumsum(dx)
yy <- cumsum(dy)
xx <- c(xx[1], rep(xx[2:N], each=2), xx[1])
yy <- rep(yy, each=2)
grid.polygon(x=c(0.1,0.1,0.2,0.2,0.1), y = c(0.1,0.2,0.2,0.1,0.1),
id=rep(1,2*N), gp=gpar(fill="red"))
length(xx)
length(yy)
rep(1,2*N)
length(rep(1,2*N))
library(grid)
grid.newpage()
# grid.polygon(x=c(0.1,0.1,0.2,0.2,0.1), y = c(0.1,0.2,0.2,0.1,0.1),
#               id=rep(1,5), gp=gpar(fill="red"))
dx <- c(0.35,0.6,-0.9,0.6,-0.3)
dy <- c(0.95,-0.6,0.3,-0.6,0.9)
N <- 5
xx <- cumsum(dx)
yy <- cumsum(dy)
xx <- c(xx[1], rep(xx[2:N], each=2), xx[1])
yy <- rep(yy, each=2)
(6*268 + 10*268.5)/16
1200*2.9
15000/32
pnorm(0.5) - pnorm(0.25)
xx <- seq(-3, 3, by=0.01)
yy <- pnorm(xx)
plot(xx,yy, type="l", col="red")
pnorm(1.25) - pnorm(1)
xx <- rnorm(1000,26,10)
hist(xx)
igaunija2009 <- c(4000,5000,7000,8000,10000)
plot(igaunija2009, type="h")
plot(2009:2013, latvijaTFR, pch=21, type="l", col="darkred")
latvijaTFR <- c(1.58,
1.46,
1.36,
1.33,
1.44 )
lietuvaTFR <- c(1.45,
1.50,
1.50,
1.55,
1.60 )
plot(2009:2013, latvijaTFR, pch=21, type="l", col="darkred")
latvijaTFR <- c(1.58,
1.46,
1.36,
1.33,
1.44 )
lietuvaTFR <- c(1.45,
1.50,
1.50,
1.55,
1.60 )
plot(2009:2013, latvijaTFR, pch=21, type="l", col="darkred")
plot(2009:2013, lietuvaTFR, pch=21, type="l", col="green")
latvijaTFR <- c(1.58,
1.46,
1.36,
1.33,
1.44 )
lietuvaTFR <- c(1.45,
1.50,
1.50,
1.55,
1.60 )
plot(2009:2013, latvijaTFR, pch=21, type="l", col="darkred")
line(2009:2013, lietuvaTFR, pch=21, type="l", col="green")
grid()
(6*286 + 10*286.5)/16
(286 + 286.5)/2
3480/1200
-15000/32
grade9 <- c(0.85, 0.54, 0.94)
grade12 <- c(0.78, 0.73, 0.85)
plot(grade9, grade12)
x <- c(4,6,3,9)
snakes <- c(4,6,3,9)
snakes
names <- c("Georgs", "Ruuta", "Natalija")
names
names[2]
length(names)
snakes
snakes + 10
2*snakes
sum(snakes)
sum(snakes)/4
sum(snakes)/length(snakes)
mean(snakes)
snakes - mean(snakes)
(snakes - mean(snakes))
(snakes - mean(snakes))^2
sum((snakes - mean(snakes))^2)
sum((snakes - mean(snakes))^2)/4
sqrt(sum((snakes - mean(snakes))^2)/4)
sum((snakes - mean(snakes))^2)/4
snakes
sort(snakes)
min(snakes)
max(snakes)
snakes
snakes[1:2]
snakes[1:3]
plot(snakes)
snakes
plot(snakes)
plot(1:4,snakes)
?plot
?expand.grid
library(ggplot2)
years <- 2010:2014
lilliput <- c(13,16,15,17,19)
brobdingnag <- c(8,6,7,9,11)
df <- expand.grid(Year = years,
Country = c("Lilliput", "Brobdingnag"))
df
library(ggplot2)
years <- 2010:2014
# Jūsu piemērā df ielasa no datu tabulas
lilliput <- c(13,16,15,17,19)
brobdingnag <- c(8,6,7,9,11)
pop <- function(year, country) {
if (country == "Lilliput") {
return(lilliput[year - 2010 + 1])
}
if (country == "Lilliput") {
return(brobdingnag[year - 2010 + 1])
}
print("Country is not correctly specified!")
return(0)
}
df <- expand.grid(Year = years,
Country = c("Lilliput", "Brobdingnag"))
df$Population <- pop(df$Year, df$Country)
ggplot(df,
aes(x = Year,
y = Population,
color = Country)) +
geom_point() + geom_line()
library(ggplot2)
years <- 2010:2014
# Jūsu piemērā df ielasa no datu tabulas
lilliput <- c(13,16,15,17,19)
brobdingnag <- c(8,6,7,9,11)
pop <- function(year, country) {
if (country == "Lilliput") {
return(lilliput[year - 2010 + 1])
}
if (country == "Lilliput") {
return(brobdingnag[year - 2010 + 1])
}
print("Country is not correctly specified!")
return(0)
}
df <- expand.grid(Year = years,
Country = c("Brobdingnag","Lilliput"))
df$Population <- pop(df$Year, df$Country)
ggplot(df,
aes(x = Year,
y = Population,
color = Country)) +
geom_point() + geom_line()
library(ggplot2)
years <- 2010:2014
# Jūsu piemērā df ielasa no datu tabulas
lilliput <- c(13,16,15,17,19)
brobdingnag <- c(8,6,7,9,11)
pop <- function(year, country) {
if (country == "Lilliput") {
return(lilliput[year - 2010 + 1])
}
if (country == "Lilliput") {
return(brobdingnag[year - 2010 + 1])
}
print("Country is not correctly specified!")
return(0)
}
df <- expand.grid(Year = years,
Country = c("Lilliput", "Brobdingnag"))
df$Population <- pop(df$Year, df$Country)
ggplot(df,
aes(x = Year,
y = Population,
color = Country)) +
geom_point() + geom_line()
library(ggplot2)
years <- 2010:2014
# Jūsu piemērā df ielasa no datu tabulas
lilliput <- c(13,16,15,17,19)
brobdingnag <- c(8,6,7,9,16)
pop <- function(year, country) {
if (country == "Lilliput") {
return(lilliput[year - 2010 + 1])
}
if (country == "Lilliput") {
return(brobdingnag[year - 2010 + 1])
}
print("Country is not correctly specified!")
return(0)
}
df <- expand.grid(Year = years,
Country = c("Lilliput", "Brobdingnag"))
df$Population <- pop(df$Year, df$Country)
ggplot(df,
aes(x = Year,
y = Population,
color = Country)) +
geom_point() + geom_line()
library(ggplot2)
years <- 2010:2014
# Jūsu piemērā df ielasa no datu tabulas
lilliput <- c(13,16,15,17,19)
brobdingnag <- c(8,6,7,9,16)
pop <- function(year, country) {
if (country == "Lilliput") {
return(lilliput[year - 2010 + 1])
}
if (country == "Lilliput") {
return(brobdingnag[year - 2010 + 1])
}
print("Country is not correctly specified!")
return(0)
}
df <- expand.grid(Year = years,
Country = c("Lilliput", "Brobdingnag"))
population <-
sapply(1:nrow(df),
function(i) {
return pop(df$Year[i],df$Country[i])
}
)
# df$Population <- pop(df$Year, df$Country)
ggplot(df,
aes(x = Year,
y = Population,
color = Country)) +
geom_point() + geom_line()
library(ggplot2)
years <- 2010:2014
# Jūsu piemērā df ielasa no datu tabulas
lilliput <- c(13,16,15,17,19)
brobdingnag <- c(8,6,7,9,16)
pop <- function(year, country) {
if (country == "Lilliput") {
return(lilliput[year - 2010 + 1])
}
if (country == "Lilliput") {
return(brobdingnag[year - 2010 + 1])
}
print("Country is not correctly specified!")
return(0)
}
df <- expand.grid(Year = years,
Country = c("Lilliput", "Brobdingnag"))
population <-
sapply(1:nrow(df),
function(i) {
return pop(df$Year[i],df$Country[i])
}
)
df$Population <- population
# df$Population <- pop(df$Year, df$Country)
ggplot(df,
aes(x = Year,
y = Population,
color = Country)) +
geom_point() + geom_line()
library(ggplot2)
years <- 2010:2014
# Jūsu piemērā df ielasa no datu tabulas
lilliput <- c(13,16,15,17,19)
brobdingnag <- c(8,6,7,9,16)
pop <- function(year, country) {
if (country == "Lilliput") {
return(lilliput[year - 2010 + 1])
}
if (country == "Lilliput") {
return(brobdingnag[year - 2010 + 1])
}
print("Country is not correctly specified!")
return(0)
}
df <- expand.grid(Year = years,
Country = c("Lilliput", "Brobdingnag"))
population <-
sapply(1:nrow(df),
function(i) {
return(pop(df$Year[i],df$Country[i]))
}
)
df$Population <- population
# df$Population <- pop(df$Year, df$Country)
ggplot(df,
aes(x = Year,
y = Population,
color = Country)) +
geom_point() + geom_line()
library(ggplot2)
years <- 2010:2014
# Jūsu piemērā df ielasa no datu tabulas
lilliput <- c(13,16,15,17,19)
brobdingnag <- c(8,6,7,9,16)
pop <- function(year, country) {
if (country == "Lilliput") {
return(lilliput[year - 2010 + 1])
}
if (country == "Brobdingnag") {
return(brobdingnag[year - 2010 + 1])
}
print("Country is not correctly specified!")
return(0)
}
df <- expand.grid(Year = years,
Country = c("Lilliput", "Brobdingnag"))
population <-
sapply(1:nrow(df),
function(i) {
return(pop(df$Year[i],df$Country[i]))
}
)
df$Population <- population
# df$Population <- pop(df$Year, df$Country)
ggplot(df,
aes(x = Year,
y = Population,
color = Country)) +
geom_point() + geom_line()
summary(cars)
99/19
(85-40.5)/20.7
(85-40.5)/20.7
pnorm((85-40.5)/20.7)
levels <- c(930,2834,4692,4184,2635,1042,113)
930/sum(levels)
(z <- round((85-40.5)/20.7, digits=2))
1 - pnorm(z)
round(100*118/(167 + 118), digits=1)
22/30
11/30
8/30
11/30
4/30
library(RColorBrewer)
?RColorBrewer
display.brewer.all()
?heatmap.2
my_palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
my_palette
my_palette <- colorRampPalette(c("red", "yellow", "green"))(n = 8)
my_palette
pie(rep(1,8), col=my_palette)
my_palette <- colorRampPalette(c("red", "yellow"))(n = 8)
pie(rep(1,8), col=my_palette)
my_palette <- colorRampPalette(c("red", "yellow", "green"))(n = 8)
pie(rep(1,8), col=my_palette)
my_palette
?brewer.pal
brewer.pal(11, "Spectral")
my_palette <- brewer.pal(8, "Spectral")
pie(rep(1,8), col=my_palette)
my_palette <- brewer.pal(8, "RdBu")
pie(rep(1,8), col=my_palette)
my_palette <- brewer.pal(8, "YlOrRd")
pie(rep(1,8), col=my_palette)
my_palette <- brewer.pal(8, "Oranges")
pie(rep(1,8), col=my_palette)
my_palette <- brewer.pal(8, "RdBu")
pie(rep(1,8), col=my_palette)
brewer.pal(11, "Spectral")
brewer.pal(8, "Spectral")
my_palette <- brewer.pal(8, "Spectral")
pie(rep(1,8), col=my_palette)
my_palette <- brewer.pal(8, "RdBu")
pie(rep(1,8), col=my_palette)
my_palette
11*16+2
32+11
13*16 + 6
6*16
64+13
15*16 + 4
10*16 + 5
15*16 + 13
13*16 + 11
12*16 + 7
my_palette
13*16 + 1
14*16 + 5
15*16
9*16 + 2
12*16 + 5
13*16 + 14
4*16 + 3
9*16 + 3
12*16 + 3
160+12
heat.colors(5, alpha = 1)
cc <- heat.colors(5, alpha = 1)
pie(rep(1,5),col=cc)
pie(rep(1,9),col=cc)
pie(rep(1,5),col=cc)
cc <- heat.colors(9, alpha = 1)
pie(rep(1,9),col=cc)
cc
cc <- heat.colors(5, alpha = 1)
pie(rep(1,5),col=cc)
cc
setwd("/home/st/java-eim/java-eim-parent/src/site/resources/exams-middle/")
# http://quantifyingmemory.blogspot.be/2013/02/reproducible-research-with-r-knitr.html
#if(!require(installr)) { install.packages("installr"); require(installr)} #load / install+load installr
#install.pandoc()
if (!"knitr" %in% installed.packages()) install.packages("knitr")
if (!"markdown" %in% installed.packages()) install.packages("markdown")
library(knitr)
library(markdown)
primes = read.table(
file="numbers.csv",
header=TRUE,
sep=",",
row.names=NULL,
fileEncoding="UTF-8"
)
prob01.data = read.table(
file="prob01-dati.csv",
header=TRUE,
sep=",",
row.names=NULL,
fileEncoding="UTF-8"
)
prob01.questions = read.table(
file="prob01-dati.csv",
header=TRUE,
sep=",",
row.names=NULL,
fileEncoding="UTF-8"
)
prob15.questions = read.table(
file="prob15-dati.csv",
header=TRUE,
sep=",",
row.names=NULL,
fileEncoding="UTF-8"
)
files <- c("template")
for (file in files) {
for (var in 1:4) {
prob01 <- as.vector(primes[var,])
prob15 <- as.vector(prob15.questions[var,])[2:(prob15.questions[var,1]+1)]
knit(sprintf("%s.rmd",file))
system(sprintf("pandoc -o %s%02d.docx %s.md",
"exam", var, file))
}
}
setwd("/home/st/java-eim/java-eim-parent/src/site/resources/exams-middle/")
# http://quantifyingmemory.blogspot.be/2013/02/reproducible-research-with-r-knitr.html
#if(!require(installr)) { install.packages("installr"); require(installr)} #load / install+load installr
#install.pandoc()
if (!"knitr" %in% installed.packages()) install.packages("knitr")
if (!"markdown" %in% installed.packages()) install.packages("markdown")
library(knitr)
library(markdown)
primes = read.table(
file="numbers.csv",
header=TRUE,
sep=",",
row.names=NULL,
fileEncoding="UTF-8"
)
prob01.data = read.table(
file="prob01-dati.csv",
header=TRUE,
sep=",",
row.names=NULL,
fileEncoding="UTF-8"
)
prob01.questions = read.table(
file="prob01-dati.csv",
header=TRUE,
sep=",",
row.names=NULL,
fileEncoding="UTF-8"
)
prob15.questions = read.table(
file="prob15-dati.csv",
header=TRUE,
sep=",",
row.names=NULL,
fileEncoding="UTF-8"
)
files <- c("template")
for (file in files) {
for (var in 1:4) {
prob01 <- as.vector(primes[var,])
prob15 <- as.vector(prob15.questions[var,])[2:(prob15.questions[var,1]+1)]
knit(sprintf("%s.rmd",file))
system(sprintf("pandoc -o %s%02d.docx %s.md",
"exam", var, file))
}
}
